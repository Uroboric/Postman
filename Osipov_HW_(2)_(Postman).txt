http://162.55.220.72:5005/first

Отправить запрос.

Статус код 200

pm.test("Статус код 200", function () {
    pm.response.to.have.status(200);
});
Проверить, что в body приходит правильный string.
pm.test("В ответ получаем верную строку", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});
http://162.55.220.72:5005/user_info_3

Отправить запрос.

Статус код 200

pm.test("Статус код 200", function () {
    pm.response.to.have.status(200);
});
Спарсить response body в json.
let jsonData = pm.response.json();
Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("name = Fedor", function () {
    pm.expect(jsonData.name).to.eql("Fedor");
});
Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("age = 23", function () {
    pm.expect(jsonData.age).to.eql("23");
});
Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("salary = 1000", function () {
    pm.expect(jsonData.salary).to.eql(1000);
});
Спарсить request.
let reqData = request.data;
// создадим переменную salaryInt и присвоим ей преобразованное в int значение reqData.salary 
let salaryInt = +(reqData.salary);
Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Response name = Request name", function () {
    pm.expect(jsonData.name).to.eql(reqData.name);
});
Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Response age = Request age", function () {
    pm.expect(jsonData.age).to.eql(reqData.age);
});
Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Response salary = Request salary", function () {
    pm.expect(jsonData.salary).to.eql(salaryInt);
});
Вывести в консоль параметр family из response.
console.log(jsonData.family);
Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
salaryInt = salaryInt*4;
pm.test("Response u_salary_1_5_year = salary*4", function () {
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(salaryInt);
});
http://162.55.220.72:5005/object_info_3

Отправить запрос.

Статус код 200

pm.test("Статус код 200", function () {
    pm.response.to.have.status(200);
});
Спарсить response body в json.
let jsonData = pm.response.json();
Спарсить request.
let reqData = pm.request.url.query.toObject();
// создадим переменную salaryInt и присвоим ей преобразованное в int значение reqData.salary 
let salaryInt = +(reqData.salary)
Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Response name = Request name", function () {
    pm.expect(jsonData.name).to.eql(reqData.name);
});
Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Response age = Request age", function () {
    pm.expect(jsonData.age).to.eql(reqData.age);
});
Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Response salary = Request salary", function () {
    pm.expect(jsonData.salary).to.eql(salaryInt);
});
Вывести в консоль параметр family из response.
console.log(jsonData.family);
Проверить, что у параметра dog есть параметры name.
pm.test("Dog has a name", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("name");
});
Проверить, что у параметра dog есть параметры age.
pm.test("Dog has a age", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("age");
});
Проверить, что параметр name имеет значение Luky.
pm.test("Dog name = Luky", function () {
    pm.expect(jsonData.family.pets.dog.name).to.eql("Luky");
});
Проверить, что параметр age имеет значение 4.
pm.test("Dog age = 4", function () {
    pm.expect(jsonData.family.pets.dog.age).to.eql(4);
});
http://162.55.220.72:5005/object_info_4

Отправить запрос.

Статус код 200

pm.test("Статус код 200", function () {
    pm.response.to.have.status(200);
});
Спарсить response body в json.
let jsonData = pm.response.json();
Спарсить request.
let reqData = pm.request.url.query.toObject();
// создадим переменную salaryInt и присвоим ей преобразованное в int значение reqData.salary 
let salaryInt = +(reqData.salary)
Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Response name = Request name", function () {
    pm.expect(jsonData.name).to.eql(reqData.name);
});
Проверить, что age в ответе равно age из request (age забрать из request.)
ageInt = Number(jsonData.age);
pm.test("Response age = Request age", function () {
    pm.expect(jsonData.age).to.eql(ageInt);
});
Вывести в консоль параметр salary из request.
console.log("Request salary ===> ", reqData.salary);
Вывести в консоль параметр salary из response.
console.log("Rsponse salary ===> ", jsonData.salary);
Вывести в консоль 0-й элемент параметра salary из response.
console.log("Вывод из списка salary, элемента 0 ===> ", jsonData.salary[0]);
Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log("Вывод из списка salary, элемента 1 ===> ", jsonData.salary[1]);
Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log("Вывод из списка salary, элемента 2 ===> ", jsonData.salary[2]);
Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
salaryInt = Number(reqData.salary);
pm.test("Response salary [0] = Request salary", function () {
    pm.expect(jsonData.salary[0]).to.eql(salaryInt);
});
Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Response salary [1] = Request salary", function () {
    pm.expect(jsonData.salary[1]).to.eql+(salaryInt*2);
});
Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Response salary [1] = Request salary", function () {
    pm.expect(jsonData.salary[2]).to.eql+(salaryInt*3);
});
Создать в окружении переменную name

Создать в окружении переменную age

Создать в окружении переменную salary

Передать в окружение переменную name

pm.environment.set("name", jsonData.name);
Передать в окружение переменную age
pm.environment.set("age", jsonData.age);
Передать в окружение переменную salary
pm.environment.set("salary", jsonData.salary[0]);
Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for (let i = 0; i < jsonData.salary.length; i++) {
  // Этот код выполняется для каждого элемента
  console.log("Вывод из списка, элемента с индексом " + i + ": " +jsonData.salary[i]);
}
// или
// for (let i of jsonData.salary){
//     console.log(i)
// }
http://162.55.220.72:5005/user_info_2

Вставить параметр salary из окружения в request

Вставить параметр age из окружения в age

Вставить параметр name из окружения в name

Отправить запрос.

Статус код 200

pm.test("Статус код 200", function () {
    pm.response.to.have.status(200);
});
Спарсить response body в json.
let jsonData = pm.response.json();
Спарсить request.
let reqData = request.data
Проверить, что json response имеет параметр start_qa_salary
pm.test("json response имеет параметр start_qa_salary", function () {
    pm.expect(jsonData).to.have.property("start_qa_salary");
});
Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("json response имеет параметр qa_salary_after_6_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});
Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("json response имеет параметр qa_salary_after_12_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
});
Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("json response имеет параметр qa_salary_after_1.5_year", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});
Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("json response имеет параметр qa_salary_after_3.5_years", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});
Проверить, что json response имеет параметр person
pm.test("json response имеет параметр person", function () {
    pm.expect(jsonData).to.have.property("person");
});
Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("Response start_qa_salary = Request start_qa_salary", function () {
    pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary);
});
Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Response qa_salary_after_6_months = Request qa_salary_after_6_months", function () {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary*2);
});
Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Response qa_salary_after_12_months = Request qa_salary_after_12_months", function () {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.7);
});
Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("Response qa_salary_after_1.5_year = Request qa_salary_after_1.5_year", function () {
    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqData.salary*3.3);
});
Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("Response qa_salary_after_3.5_years = Request qa_salary_after_3.5_years", function () {
    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+reqData.salary*3.8);
});
Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("В response параметре person, 1-й элемент из u_name равен salary из request", function () {
    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);
});
Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("В response параметре person, элемент u_age равен age из request", function () {
    pm.expect(jsonData.person.u_age).to.eql(+reqData.age);
});
Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("В response параметре person, элемент u_salary_5_years равен salary*4.2 из request", function () {
    pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);
});
***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for (let i = 0; i < jsonData.person.u_name.length; i++) {
  // Этот код выполняется для каждого элемента
  console.log("Вывод из списка, элемента с индексом " + i + ": " + jsonData.person.u_name[i]);
}
// или 
/*
for (let i of jsonData.person.u_name){
    console.log(i)
}
*/
// или 
/*
for(let KEY in jsonData.person) {
   if(typeof(jsonData.person[KEY]) == "object"){
       for(let i = 0; i < Object.keys(jsonData.person[KEY]).length; i++){
           console.log(jsonData.person[KEY][i]);
       }
   }
   else if(typeof(jsonData.person[KEY]) != "object") {
        console.log(jsonData.person[KEY]);
   }
}
*/